{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","token","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","a","async","config","headers","Authorization","post","put","newToken","credentials","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","event","preventDefault","noteObject","Date","toISOString","Math","random","length","returnedNote","handleNoteChange","target","value","handleLogin","loginService","setItem","stringify","setTimeout","notesToShow","filter","onSubmit","type","name","onChange","removeItem","map","i","key","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.780c2e68.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/login'\r\n\r\nconst login = async credentials => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if(loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n  \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)   \n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    \n    try {\n      const user = await loginService.login({\n        username, password\n      })\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n    const loginForm = () => (\n      <form onSubmit={handleLogin}>\n        <div>\n          username\n            <input\n            type=\"text\"\n            value={username}\n            name=\"Username\"\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password\n            <input\n            type=\"password\"\n            value={password}\n            name=\"Password\"\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type=\"submit\">login</button>\n      </form>      \n    )\n  \n    const noteForm = () => (\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    )\n\n    \n  const handleLogout = (event) => {\n    event.preventDefault()\n    window.localStorage.removeItem('loggedNoteappUser')\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      \n      {user === null \n      ? loginForm() :\n        <div>\n          <p>{user.username} logged-in {\" \"}\n            <button type=\"submit\" onClick={handleLogout}>logout</button>\n          </p>\n          {noteForm()}\n        </div>\n      }\n      \n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note\n            key={i}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul> \n    </div>\n  )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}